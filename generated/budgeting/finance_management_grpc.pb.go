// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: budgeting_service/finance_management.proto

package budgeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FinanceManagementService_CreateAccount_FullMethodName       = "/finance_management.FinanceManagementService/CreateAccount"
	FinanceManagementService_UpdateAccount_FullMethodName       = "/finance_management.FinanceManagementService/UpdateAccount"
	FinanceManagementService_GetAccount_FullMethodName          = "/finance_management.FinanceManagementService/GetAccount"
	FinanceManagementService_GetAccountsList_FullMethodName     = "/finance_management.FinanceManagementService/GetAccountsList"
	FinanceManagementService_DeleteAccount_FullMethodName       = "/finance_management.FinanceManagementService/DeleteAccount"
	FinanceManagementService_CreateTransaction_FullMethodName   = "/finance_management.FinanceManagementService/CreateTransaction"
	FinanceManagementService_UpdateTransaction_FullMethodName   = "/finance_management.FinanceManagementService/UpdateTransaction"
	FinanceManagementService_GetTransaction_FullMethodName      = "/finance_management.FinanceManagementService/GetTransaction"
	FinanceManagementService_GetTransactionsList_FullMethodName = "/finance_management.FinanceManagementService/GetTransactionsList"
	FinanceManagementService_DeleteTransaction_FullMethodName   = "/finance_management.FinanceManagementService/DeleteTransaction"
)

// FinanceManagementServiceClient is the client API for FinanceManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceManagementServiceClient interface {
	// Moliyaviy hisoblarni boshqarish
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*UpdateAccountResp, error)
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	GetAccountsList(ctx context.Context, in *GetAccountsListReq, opts ...grpc.CallOption) (*GetAccountsListResp, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error)
	// Tranzaksiyalarni boshqarish:
	CreateTransaction(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*CreateTransactionResp, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionReq, opts ...grpc.CallOption) (*UpdateTransactionResp, error)
	GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	GetTransactionsList(ctx context.Context, in *GetTransactionsListReq, opts ...grpc.CallOption) (*GetTransactionsListResp, error)
	DeleteTransaction(ctx context.Context, in *DeleteTransactionReq, opts ...grpc.CallOption) (*DeleteTransactionResp, error)
}

type financeManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceManagementServiceClient(cc grpc.ClientConnInterface) FinanceManagementServiceClient {
	return &financeManagementServiceClient{cc}
}

func (c *financeManagementServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*UpdateAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) GetAccountsList(ctx context.Context, in *GetAccountsListReq, opts ...grpc.CallOption) (*GetAccountsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsListResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_GetAccountsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*CreateTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionReq, opts ...grpc.CallOption) (*UpdateTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) GetTransactionsList(ctx context.Context, in *GetTransactionsListReq, opts ...grpc.CallOption) (*GetTransactionsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsListResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_GetTransactionsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeManagementServiceClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionReq, opts ...grpc.CallOption) (*DeleteTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTransactionResp)
	err := c.cc.Invoke(ctx, FinanceManagementService_DeleteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceManagementServiceServer is the server API for FinanceManagementService service.
// All implementations must embed UnimplementedFinanceManagementServiceServer
// for forward compatibility
type FinanceManagementServiceServer interface {
	// Moliyaviy hisoblarni boshqarish
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	UpdateAccount(context.Context, *UpdateAccountReq) (*UpdateAccountResp, error)
	GetAccount(context.Context, *GetAccountReq) (*GetAccountResp, error)
	GetAccountsList(context.Context, *GetAccountsListReq) (*GetAccountsListResp, error)
	DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error)
	// Tranzaksiyalarni boshqarish:
	CreateTransaction(context.Context, *CreateTransactionReq) (*CreateTransactionResp, error)
	UpdateTransaction(context.Context, *UpdateTransactionReq) (*UpdateTransactionResp, error)
	GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	GetTransactionsList(context.Context, *GetTransactionsListReq) (*GetTransactionsListResp, error)
	DeleteTransaction(context.Context, *DeleteTransactionReq) (*DeleteTransactionResp, error)
	mustEmbedUnimplementedFinanceManagementServiceServer()
}

// UnimplementedFinanceManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinanceManagementServiceServer struct {
}

func (UnimplementedFinanceManagementServiceServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFinanceManagementServiceServer) UpdateAccount(context.Context, *UpdateAccountReq) (*UpdateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedFinanceManagementServiceServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedFinanceManagementServiceServer) GetAccountsList(context.Context, *GetAccountsListReq) (*GetAccountsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsList not implemented")
}
func (UnimplementedFinanceManagementServiceServer) DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedFinanceManagementServiceServer) CreateTransaction(context.Context, *CreateTransactionReq) (*CreateTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedFinanceManagementServiceServer) UpdateTransaction(context.Context, *UpdateTransactionReq) (*UpdateTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedFinanceManagementServiceServer) GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedFinanceManagementServiceServer) GetTransactionsList(context.Context, *GetTransactionsListReq) (*GetTransactionsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsList not implemented")
}
func (UnimplementedFinanceManagementServiceServer) DeleteTransaction(context.Context, *DeleteTransactionReq) (*DeleteTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedFinanceManagementServiceServer) mustEmbedUnimplementedFinanceManagementServiceServer() {
}

// UnsafeFinanceManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceManagementServiceServer will
// result in compilation errors.
type UnsafeFinanceManagementServiceServer interface {
	mustEmbedUnimplementedFinanceManagementServiceServer()
}

func RegisterFinanceManagementServiceServer(s grpc.ServiceRegistrar, srv FinanceManagementServiceServer) {
	s.RegisterService(&FinanceManagementService_ServiceDesc, srv)
}

func _FinanceManagementService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).UpdateAccount(ctx, req.(*UpdateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_GetAccountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).GetAccountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_GetAccountsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).GetAccountsList(ctx, req.(*GetAccountsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).DeleteAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).CreateTransaction(ctx, req.(*CreateTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).GetTransaction(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_GetTransactionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).GetTransactionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_GetTransactionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).GetTransactionsList(ctx, req.(*GetTransactionsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceManagementService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceManagementServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceManagementService_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceManagementServiceServer).DeleteTransaction(ctx, req.(*DeleteTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceManagementService_ServiceDesc is the grpc.ServiceDesc for FinanceManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_management.FinanceManagementService",
	HandlerType: (*FinanceManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _FinanceManagementService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _FinanceManagementService_UpdateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _FinanceManagementService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountsList",
			Handler:    _FinanceManagementService_GetAccountsList_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _FinanceManagementService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _FinanceManagementService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _FinanceManagementService_UpdateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _FinanceManagementService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionsList",
			Handler:    _FinanceManagementService_GetTransactionsList_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _FinanceManagementService_DeleteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budgeting_service/finance_management.proto",
}
