// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: budgeting_service/budgeting.proto

package budgeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BudgetingService_CreateCategory_FullMethodName    = "/budgeting.BudgetingService/CreateCategory"
	BudgetingService_GetCategoriesList_FullMethodName = "/budgeting.BudgetingService/GetCategoriesList"
	BudgetingService_GetCategory_FullMethodName       = "/budgeting.BudgetingService/GetCategory"
	BudgetingService_UpdateCategory_FullMethodName    = "/budgeting.BudgetingService/UpdateCategory"
	BudgetingService_DeleteCategory_FullMethodName    = "/budgeting.BudgetingService/DeleteCategory"
	BudgetingService_CreateBudget_FullMethodName      = "/budgeting.BudgetingService/CreateBudget"
	BudgetingService_GetBudgetsList_FullMethodName    = "/budgeting.BudgetingService/GetBudgetsList"
	BudgetingService_GetBudget_FullMethodName         = "/budgeting.BudgetingService/GetBudget"
	BudgetingService_UpdateBudget_FullMethodName      = "/budgeting.BudgetingService/UpdateBudget"
	BudgetingService_DeleteBudget_FullMethodName      = "/budgeting.BudgetingService/DeleteBudget"
)

// BudgetingServiceClient is the client API for BudgetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetingServiceClient interface {
	// Kategoriyalarni boshqarish
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error)
	GetCategoriesList(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesResp, error)
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
	// Byudjetni boshqarish
	CreateBudget(ctx context.Context, in *CreateBudgetReq, opts ...grpc.CallOption) (*CreateBudgetResp, error)
	GetBudgetsList(ctx context.Context, in *GetBudgetsReq, opts ...grpc.CallOption) (*GetBudgetsResp, error)
	GetBudget(ctx context.Context, in *GetBudgetReq, opts ...grpc.CallOption) (*GetBudgetResp, error)
	UpdateBudget(ctx context.Context, in *UpdateBudgetReq, opts ...grpc.CallOption) (*UpdateBudgetResp, error)
	DeleteBudget(ctx context.Context, in *DeleteBudgetReq, opts ...grpc.CallOption) (*DeleteBudgetResp, error)
}

type budgetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetingServiceClient(cc grpc.ClientConnInterface) BudgetingServiceClient {
	return &budgetingServiceClient{cc}
}

func (c *budgetingServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCategoryResp)
	err := c.cc.Invoke(ctx, BudgetingService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetCategoriesList(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResp)
	err := c.cc.Invoke(ctx, BudgetingService_GetCategoriesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryResp)
	err := c.cc.Invoke(ctx, BudgetingService_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryResp)
	err := c.cc.Invoke(ctx, BudgetingService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryResp)
	err := c.cc.Invoke(ctx, BudgetingService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) CreateBudget(ctx context.Context, in *CreateBudgetReq, opts ...grpc.CallOption) (*CreateBudgetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBudgetResp)
	err := c.cc.Invoke(ctx, BudgetingService_CreateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetBudgetsList(ctx context.Context, in *GetBudgetsReq, opts ...grpc.CallOption) (*GetBudgetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBudgetsResp)
	err := c.cc.Invoke(ctx, BudgetingService_GetBudgetsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetBudget(ctx context.Context, in *GetBudgetReq, opts ...grpc.CallOption) (*GetBudgetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBudgetResp)
	err := c.cc.Invoke(ctx, BudgetingService_GetBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) UpdateBudget(ctx context.Context, in *UpdateBudgetReq, opts ...grpc.CallOption) (*UpdateBudgetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBudgetResp)
	err := c.cc.Invoke(ctx, BudgetingService_UpdateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) DeleteBudget(ctx context.Context, in *DeleteBudgetReq, opts ...grpc.CallOption) (*DeleteBudgetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBudgetResp)
	err := c.cc.Invoke(ctx, BudgetingService_DeleteBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetingServiceServer is the server API for BudgetingService service.
// All implementations must embed UnimplementedBudgetingServiceServer
// for forward compatibility
type BudgetingServiceServer interface {
	// Kategoriyalarni boshqarish
	CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryResp, error)
	GetCategoriesList(context.Context, *GetCategoriesReq) (*GetCategoriesResp, error)
	GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error)
	UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error)
	DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error)
	// Byudjetni boshqarish
	CreateBudget(context.Context, *CreateBudgetReq) (*CreateBudgetResp, error)
	GetBudgetsList(context.Context, *GetBudgetsReq) (*GetBudgetsResp, error)
	GetBudget(context.Context, *GetBudgetReq) (*GetBudgetResp, error)
	UpdateBudget(context.Context, *UpdateBudgetReq) (*UpdateBudgetResp, error)
	DeleteBudget(context.Context, *DeleteBudgetReq) (*DeleteBudgetResp, error)
	mustEmbedUnimplementedBudgetingServiceServer()
}

// UnimplementedBudgetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBudgetingServiceServer struct {
}

func (UnimplementedBudgetingServiceServer) CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedBudgetingServiceServer) GetCategoriesList(context.Context, *GetCategoriesReq) (*GetCategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesList not implemented")
}
func (UnimplementedBudgetingServiceServer) GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedBudgetingServiceServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedBudgetingServiceServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedBudgetingServiceServer) CreateBudget(context.Context, *CreateBudgetReq) (*CreateBudgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBudget not implemented")
}
func (UnimplementedBudgetingServiceServer) GetBudgetsList(context.Context, *GetBudgetsReq) (*GetBudgetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgetsList not implemented")
}
func (UnimplementedBudgetingServiceServer) GetBudget(context.Context, *GetBudgetReq) (*GetBudgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}
func (UnimplementedBudgetingServiceServer) UpdateBudget(context.Context, *UpdateBudgetReq) (*UpdateBudgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (UnimplementedBudgetingServiceServer) DeleteBudget(context.Context, *DeleteBudgetReq) (*DeleteBudgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudget not implemented")
}
func (UnimplementedBudgetingServiceServer) mustEmbedUnimplementedBudgetingServiceServer() {}

// UnsafeBudgetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetingServiceServer will
// result in compilation errors.
type UnsafeBudgetingServiceServer interface {
	mustEmbedUnimplementedBudgetingServiceServer()
}

func RegisterBudgetingServiceServer(s grpc.ServiceRegistrar, srv BudgetingServiceServer) {
	s.RegisterService(&BudgetingService_ServiceDesc, srv)
}

func _BudgetingService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).CreateCategory(ctx, req.(*CreateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetCategoriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetCategoriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetCategoriesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetCategoriesList(ctx, req.(*GetCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetCategory(ctx, req.(*GetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_CreateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).CreateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_CreateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).CreateBudget(ctx, req.(*CreateBudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetBudgetsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetBudgetsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetBudgetsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetBudgetsList(ctx, req.(*GetBudgetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetBudget(ctx, req.(*GetBudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_UpdateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).UpdateBudget(ctx, req.(*UpdateBudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_DeleteBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).DeleteBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_DeleteBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).DeleteBudget(ctx, req.(*DeleteBudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetingService_ServiceDesc is the grpc.ServiceDesc for BudgetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budgeting.BudgetingService",
	HandlerType: (*BudgetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _BudgetingService_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategoriesList",
			Handler:    _BudgetingService_GetCategoriesList_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _BudgetingService_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _BudgetingService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _BudgetingService_DeleteCategory_Handler,
		},
		{
			MethodName: "CreateBudget",
			Handler:    _BudgetingService_CreateBudget_Handler,
		},
		{
			MethodName: "GetBudgetsList",
			Handler:    _BudgetingService_GetBudgetsList_Handler,
		},
		{
			MethodName: "GetBudget",
			Handler:    _BudgetingService_GetBudget_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _BudgetingService_UpdateBudget_Handler,
		},
		{
			MethodName: "DeleteBudget",
			Handler:    _BudgetingService_DeleteBudget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "budgeting_service/budgeting.proto",
}
